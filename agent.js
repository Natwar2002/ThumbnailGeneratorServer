import { GoogleGenAI } from "@google/genai";
import mime from "mime";

export async function main(input, imageUrl) {
    try {
        console.log("Image: ", imageUrl);

        console.log("üéØ Main function called with:", {
            promptLength: input?.length,
            imageUrl: imageUrl?.substring(0, 50) + "..."
        });

        const ai = new GoogleGenAI({ apiKey: process.env.NEXT_GEMINI_API_KEY });

        // Validate inputs
        if (!input || typeof input.enhanced !== 'string') {
            throw new Error("Invalid prompt provided");
        }

        if (!imageUrl || typeof imageUrl !== 'string' || !imageUrl.startsWith('http')) {
            throw new Error("Invalid image URL provided");
        }

        // Fetch image from Cloudinary URL
        console.log("üì• Fetching image from Cloudinary...");
        const res = await fetch(imageUrl);
        if (!res.ok) {
            throw new Error(`Failed to fetch image from URL: ${res.status} ${res.statusText}`);
        }

        const buffer = Buffer.from(await res.arrayBuffer());
        const mimeType = mime.getType(imageUrl) || "image/png";

        console.log("‚úÖ Image fetched:", {
            size: buffer.length,
            mimeType: mimeType
        });

        // FIXED: Correct content structure for Gemini API
        const contents = [
            {
                role: "user",
                parts: [
                    {
                        text: input.enhanced
                    },
                    {
                        inlineData: {
                            mimeType: mimeType,
                            data: buffer.toString("base64")
                        }
                    }
                ]
            }
        ];

        // FIXED: Use the correct API call structure
        const config = {
            responseModalities: ["IMAGE", "TEXT"]
        };

        const model = "gemini-2.5-flash-image-preview";

        console.log("üöÄ Calling Gemini API...");

        // Use generateContent instead of generateContentStream for simpler handling
        const response = await ai.models.generateContent({
            model: model,
            contents: contents,
            generationConfig: config
        });

        console.log(response);

        if (!response) {
            throw new Error("No response from Gemini API");
        }

        const result = response;

        // Check if we have candidates
        if (!result.candidates || result.candidates.length === 0) {
            throw new Error("No candidates in Gemini response");
        }

        const candidate = result.candidates[0];
        if (!candidate?.content || !candidate?.content?.parts) {
            throw new Error("No content parts in Gemini response");
        }

        // Process response parts
        const outputBuffers = [];
        let hasImageOutput = false;

        for (const part of candidate?.content?.parts) {
            if (part.inlineData && part.inlineData.data) {
                // Image data found
                const imageBuffer = Buffer.from(part.inlineData.data, "base64");
                outputBuffers.push(imageBuffer);
                hasImageOutput = true;
                console.log("üì∑ Found image output:", imageBuffer.length, "bytes");
            } else if (part.text) {
                // Text output
                console.log("üìù Text Output:", part.text);
            }
        }

        if (!hasImageOutput || outputBuffers.length === 0) {
            throw new Error("No image data generated by Gemini");
        }

        console.log("‚úÖ Generated", outputBuffers.length, "image buffer(s)");
        return outputBuffers;

    } catch (err) {
        console.error("‚ùå Error in main function:", err);

        // Better error message formatting
        let errorMessage = err.message;
        if (err.response && err.response.data) {
            errorMessage = `Gemini API Error: ${JSON.stringify(err.response.data)}`;
        } else if (err.status) {
            errorMessage = `API Error (${err.status}): ${err.message}`;
        }

        throw new Error(`Main function failed: ${errorMessage}`);
    }
}